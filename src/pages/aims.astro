---
import BaseLayout from '../layouts/BaseLayout.astro';

const allAims = await Astro.glob('./aims/*.md');

// Sort aims by aimNumber
allAims.sort((a, b) => a.frontmatter.aimNumber - b.frontmatter.aimNumber);

// Prepare aims data with title, aimNumber, and tags
const aims = allAims.map(aim => ({
  aimNumber: aim.frontmatter.aimNumber,
  title: aim.frontmatter.title,
  tags: aim.frontmatter.tags || [], // Ensure tags is an array, even if missing
}));

// Extract unique tags for filter buttons
const allTags = [...new Set(aims.flatMap(aim => aim.tags))];
---
<BaseLayout>
    <h1>Welcome to 100 Python Aims</h1>
    <p>
        This project is a collection of 100 practical Python programming challenges, designed for beginners and intermediate learners. Each "aim" is a self-contained problem with a Python solution, output, and a detailed explanation.
    </p>
    <p>
        Click on any aim below to see the solution.
    </p>

    <!-- Search Bar -->
    <div class="search-container">
        <input type="text" id="search-bar" placeholder="Search aims by title...">
    </div>

    <!-- Filter Buttons -->
    <div class="filter-buttons">
        {allTags.map(tag => (
            <button class="filter-btn" data-tag={tag}>{tag}</button>
        ))}
    </div>

    <style>
        .search-container {
            margin: 2rem 0;
        }
        #search-bar {
            width: 100%;
            padding: 0.8rem;
            font-size: 1.1rem;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        .filter-buttons {
            margin-bottom: 2rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        .filter-btn {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            transition: background-color 0.2s, border-color 0.2s;
        }
        .filter-btn.active {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }
        .aim-list {
            list-style: none;
            padding: 0;
            margin-top: 2rem;
        }
        .aim-list li {
            margin-bottom: 1rem;
            font-size: 1.1rem;
            border-left: 3px solid transparent;
            padding-left: 1.5rem;
            transition: all 0.2s ease-in-out;
        }
        .aim-list li:hover {
            border-left-color: var(--accent-color);
            transform: translateX(5px);
        }
        .aim-list a {
            text-decoration: none;
            color: var(--medium-gray);
            font-weight: 500;
        }
        .aim-list a:hover {
            color: var(--dark-gray);
        }
        /* Style for hidden items */
        .hidden {
            display: none;
        }
    </style>

    <ol class="aim-list" id="aims-list">
        {aims.map((aim) => (
            <li data-tags={aim.tags.join(',')}>
                <a href={`/aims/${aim.aimNumber}`}>
                    {`${aim.aimNumber}. ${aim.title}`}
                </a>
            </li>
        ))}
    </ol>

    <script>
        const searchBar = document.getElementById('search-bar');
        const aimsList = document.getElementById('aims-list');
        const allAims = Array.from(aimsList.getElementsByTagName('li'));
        const filterButtons = document.querySelectorAll('.filter-btn');

        let activeFilters = new Set();

        function filterAims() {
            const searchTerm = searchBar.value.toLowerCase();

            allAims.forEach(aim => {
                const title = aim.textContent.toLowerCase();
                const tags = aim.dataset.tags ? aim.dataset.tags.toLowerCase().split(',') : [];

                const matchesSearch = title.includes(searchTerm);
                const matchesFilter = activeFilters.size === 0 || Array.from(activeFilters).every(filterTag => tags.includes(filterTag));

                if (matchesSearch && matchesFilter) {
                    aim.classList.remove('hidden');
                } else {
                    aim.classList.add('hidden');
                }
            });
        }

        searchBar.addEventListener('keyup', filterAims);

        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tag = button.dataset.tag.toLowerCase();
                if (activeFilters.has(tag)) {
                    activeFilters.delete(tag);
                    button.classList.remove('active');
                } else {
                    activeFilters.add(tag);
                    button.classList.add('active');
                }
                filterAims();
            });
        });
    </script>
</BaseLayout>